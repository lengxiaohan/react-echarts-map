import "common";
import "ajax-plus";
import "receiveLess";
import React from 'react';
import ReactDOM from 'react-dom';
import PubSub from 'pubsub-js';
import {getJson} from "jsons";

// 获取区域id
let areaId = $.getUrlParam('areaId');

class MapComponent extends React.Component {
	componentDidMount() {
		const that = this;
		// this._showMap({});
		this.pubsub_token = PubSub.subscribe('showMap', function(topic, data) {
			let ObjectTokenData = {
				data1:[],
				data2:[],
				dataRangeMax:0,
				dataRangeMin:0
			};
			for (var i = 0; i < data.length; i++) {
                if (i == data.length - 1) {
                	ObjectTokenData.dataRangeMax = Math.ceil(data[0].receiveNum);
                    ObjectTokenData.dataRangeMin = Math.ceil(data[i].receiveNum);
                }
                ObjectTokenData.data1.push([{
                	name:'资中'
                },{
                	name: data[i].regionName,
                	value: data[i].receiveNum
                }]);
                ObjectTokenData.data2.push({
                	name: data[i].regionName,
                	value: data[i].receiveNum
                });
            }
			that._showMap(ObjectTokenData);
		}.bind(this));
	}
	componentWillUnmount() {
		PubSub.unsubscribe(this.pubsub_token);
	}
	_showMap(obj) {
		const that = this;
		const myChart = echarts.init(document.getElementById('echarts-map'));
		let period = 30;
        var option = {
				color: ['gold','aqua','lime'],
				tooltip : {
					trigger: 'item',
					formatter: '{b}'
				}, 
				dataRange: {
					x:$(window).width()-$(window).width()*0.95,
					y:$(window).height()-$(window).height()*0.15,
					orient: 'horizontal',
					min : 0,
					max : obj && obj.dataRangeMax || 0,
					calculable : false,
					splitNumber:0,
					text:[obj.dataRangeMax,'0'],
					itemWidth: $(window).width() / 100,
					color: ['#ff3333', 'orange', 'yellow','lime','aqua'],
					textStyle:{
						color:'#fff'
					}
				},
				series : [{
					name: '全国',
					type: 'map',
					roam: false,
					hoverable: false,
					mapType: 'china',
					itemStyle:{
						normal:{
							borderColor:'#000738',
							borderWidth:1,
							areaStyle:{
								color: '#122756'
							}
						},
						emphasis: {
							label: {
								show: true,
								textStyle: {
									color: '#fff',
									fontSize: ($(window).height() / 50 > 20 ? 20 : $(window).height() / 50)
								}
							},
							borderColor:'#000738',
							borderWidth:1,
							areaStyle:{
								color: '#122756'
							}
						}
					},
					data:[{
						name: "南海诸岛",
						selected: true
					}],
			        // 文本位置修正
			        textFixed: {
			            '南海诸岛' : [0, 0]
			        },
					markLine: {
					    smooth:true,
					    symbol: ['none', 'circle'],  
					    symbolSize : 1,
					    itemStyle : {
					        normal: {
					        	label:{
									show:false
								},
					            color:'#fff',
					            borderWidth:1,
					            borderColor:'rgba(30,144,255,0.5)'
					        }
					  	},
					    data: []
					},
					geoCoord: {}
                },
                {
                zlevel: 1,
                name: '资中',
                type: 'map',
                mapType: 'china',
                roam:false,//是否开启滚轮缩放和拖拽漫游，默认为false（关闭）
                data: [],
                geoCoord: getJson(),
                markLine: { //运输迁徙效果
                    smooth: true,
                    symbol: 'arrow',
                    effect: {
                        show: true,
                        scaleSize: 3,
                        period: period,
                        color: '#fff',
                        shadowBlur: 5
                    },
                    itemStyle: {
                        normal: {
                            borderWidth: 1,
                            label:{
                                show:false,
                            },
                            lineStyle: {
                                type: 'solid',
                                shadowBlur: 5
                            }
                        }
                    },
                    data: obj && obj.data1 || []
                },
                markPoint: { //气泡效果(不断显示隐藏交替)
                    symbol: 'emptyCircle',
                    symbolSize: function(v) {
                        return 10 + v / 800000
                    },
                    effect: {
                        show: true,
                        shadowBlur: 0
                    },
                    itemStyle: {
                        normal: {
                            label: { show: false }
                        }
                    },
                    data: obj && obj.data2 || []
                }
            }]
	    };
	    // 为echarts对象加载数据
	    myChart.setOption(option);
	}
	render() {
		return (
			<div className="echarts-map-show" id="echarts-map"></div>
		)
	}
}

class ListComponent extends React.Component {
	state = {
		show: false
	}
	constructor(props) {
		super(props);
		this.superData = [];
		this.arrayGroup = []; //拉取数据回来进行分组的转换数组
		this.setPage = 1;
		this.totalPage = 0;
		this.currentPage = 1;
	}
	componentDidMount() {
		this._getDataList();
	}
	_pushListComponent(data) {
		const that = this;
		let listArray = data ? data : []; //获取数据进行遍历赋值
		let LENGTH = listArray.length;
		if (LENGTH < 10) {
			for(let i = 0;i<10-LENGTH;i++){
				listArray.push([]);
			}
		}
		this.dom = listArray.map(function(item, list) {
			return <ListLiComponent item={item} list={list+10*(that.currentPage-1)} key={list}/>
		});
	}
	_getDataList() {
		const that = this;
		const PAGEERS = 10; //每页总个数
		let totalNums = 0;
		let setData = {
			"type":1,
			"areaId": areaId
		};
		$.GetAjax($.getCtx() + '/rest/logistics/getTbLogisticsList', setData, 'GET', true, function(data, state) {
			if (state && data) {

				// 进行数据组装
				for (let i = 0; i < data.length / PAGEERS; i++) {
					let attr = []; //该数组用于缓存当前循环的数据信息（最多存10条数据），赋给缓存session
					for (let k = i * PAGEERS; k < i * PAGEERS + PAGEERS; k++) {
						attr.push(data[k]);
						totalNums += data[k] && data[k].receiveNum || 0;
					}

					// 赋值
					that.arrayGroup[i] = attr;
					// 缓存
					sessionStorage.setItem('DATALIST_PAGE' + (i+1), JSON.stringify(that.arrayGroup[i]));

					// 初始化数据渲染
					if (i == 0) {
						that.superData = that.arrayGroup[i];
						that.totalPage = data.length / PAGEERS;
						
					}

				}
				console.log(totalNums);
				that.setState({
					show: true,
					totalNum: totalNums
				});

				PubSub.publish('showMap',data);

			} else if (!state) {
				setTimeout(() => {
					that._getDataList();
					console.log('主人，刚才服务器出了一下小差');
				}, 2000);
			}
		});
	}
	componentDidUpdate() {
		const that = this;
		setTimeout(() => {
			if (that.currentPage<that.totalPage) {
				that.currentPage++;
			}else{
				that.currentPage = 1;
			}
			that.superData = JSON.parse(sessionStorage.getItem('DATALIST_PAGE'+that.currentPage));
			that.setState({
				show: true
			});
		},2000);
	}
	render() {
		this._pushListComponent(this.superData);
		return (
			<div className="echarts-list-show">
				<div className="list-box">
					<header>
						<div className="list-title">发出量总计</div>
						<div className="list-total-num"><p>{this.state.totalNum || 0}<span>单</span></p></div>
					</header>
					<section>
						<div className="nav-title">
							<span>排名</span>
							<span>地域</span>
							<span>包裹发出量</span>
						</div>
						<ul>
							{this.dom}
						</ul>
					</section>
				</div>
			</div>
		)
	}
}

class ListLiComponent extends React.Component {
	constructor(props) {
		super(props);
		this.listData = props;
	}
	componentWillReceiveProps(nextProps) {
		const that = this;
		this.listData = nextProps;
	}
	render() {
		return (
			<li>
				<span>{this.listData.item ? (this.listData.list+1 < 10 ? "0"+(this.listData.list+1) : this.listData.list+1) : '-'}</span>
				<span>{this.listData.item && this.listData.item.regionName || '-'}</span>
				<span>{this.listData.item && this.listData.item.receiveNum || '-'}</span>
			</li>
		)
	}
}

class Container extends React.Component {
	constructor(props) {
		super(props);
	}
	render() {
		return (
			<div className="container">
	    		<MapComponent />
	    		<ListComponent />
	    	</div>
		)
	}
}

ReactDOM.render(
	<Container />,
	document.getElementById('myMap')
);