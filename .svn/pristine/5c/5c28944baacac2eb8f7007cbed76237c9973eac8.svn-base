"use strict";
import "trainingStructure";
import {getAreaName} from "common";
import "jquery";
import "ajax-plus";
import React from 'react';
import ReactDOM from 'react-dom';


// 获取区域id
let areaId = $.getUrlParam('areaId');

/**
 * @name topComponent 头部组件
 * @param _getName 头部信息名称
 */
var TopComponent = React.createClass({
    getInitialState: function() {
        return {
            data: []
        };
    },
    componentWillMount: function() {//加载数据。
        this._getDatas();
    },
    _getDatas: function() {
        const that = this;
        let setData = {
            "areaId": areaId ? areaId : '',
            dataType:'json',
            type:'GET'
        };
        $.GetAjax($.getCtx()+'/rest/ectrain/getTBLearnTimeTypeCount', setData,'GET', true, function(data,state) {
            if (state && data != '' && null != data) {
                that.setState({
                    data:data
                });
            } else {
                setTimeout(function() {//数据没有请求成功，就一直请求
                    that._getDatas();
                    console.log('链接服务器失败');
                }, 4000);
                that.setState({
                    data:''
                });
            };
       });
    },
    render: function(){
        return(
             <div className="header">
                <PieComponent data={this.state.data ? this.state.data : []} getDatas={this._getDatas} />
                <TopRightComponent data={this.state.data ? this.state.data : []} getDatas={this._getDatas}/>
            </div>
        )
    }
});


/**
 * @name PieComponent 饼图组件
 * @param _getName 头部信息名称
 */
var PieComponent = React.createClass({
    componentWillReceiveProps: function(nextProps) {
        const that = this;
        this.data = nextProps.data?nextProps.data:'';
    },
    getSesstion() {
        const that = this;
        let itemStyles = [];
        let lineColors = [ '#F67734', '#8DC909', '#EAE63D',
                'rgba(2,163,66,0.9)', 'rgba(125,0,222,0.9)',
                'rgba(0,104,222,0.9)', 'rgba(0,204,222,0.9)' ];
        for ( let i = 0; i <= lineColors.length; i++) {
            itemStyles.push({
                normal : {
                    color : lineColors[i],
                    labelLine : {
                        "show" : true,
                        length : 1,
                        lineStyle : {
                            color : lineColors[i],
                        },
                    },
                    label : {
                        position : 'outer',/* （外部） */
                        textStyle : {
                            color : lineColors[i],
                            baseline : 'middle',
                            fontFamily : '微软雅黑',
                            fontSize : 15,
                            fontWeight : 'bolder'
                        }
                    }
                }
            });
        };
        let dom = that.refs['JsPie '];//findDOMNode从组件获取真实 DOM 的节点
        if(that.data != '' && null != that.data){
            let sdatas = [];
            for ( let i in that.data ) {
                let row = that.data[i];
                let sdata = {
                    value : row,
                    name : i+" "+row 
                }
                sdatas.push(sdata);
            };
            this.getCanvas({
                data: sdatas,
                itemStyles:itemStyles,
                id: dom
            });
        }else{
            this.getCanvas({
                data:'',
                id: dom
            });
        };
    },
    getCanvas:function(obj){
        const myChart = echarts.init(obj.id).clear();
        var datas=[];
        if(obj.data.length>0){
            for(let i=0;i<obj.data.length;i++){
                let value = obj.data[i].value;
                let name = obj.data[i].name;
                datas.push({
                    value: value,
                    name: name,
                    itemStyle : obj.itemStyles[i]
                })
            }
        }
        
        let option = { 
                tooltip : {
                    trigger: 'item',
                    formatter: "{a} <br/>{b}   ({d}%)"
                },
                calculable : false,
                series : [
                    {
                        name:'培训人员结构',
                        type:'pie',
                        selectedMode: 'single',
                       /* radius : [0, 90],*/
                       radius : [0, "92%"],
                        center:['50%','54%'],
                        x: '20%',
                        width: '40%',
                        funnelAlign: 'right',
                        max: 1548,
                        
                        itemStyle : {
                            normal : {
                                label : {
                                    position : 'inner'
                                },
                                labelLine : {
                                    show : false
                                }
                            }
                        },
                        data:datas
                    }
                ]
        };
        myChart.setOption(option);
    },
    componentDidUpdate: function() {
        this.getSesstion();
    },
    render: function(){
        return(
            <div id="topPie" className="topPie" ref="JsPie "></div>
        )
    }
});

/**
 * @name topRightComponent 头部累计培训人数组件
 * @param getSesstion 处理信息
 */
var TopRightComponent = React.createClass({
    componentWillReceiveProps: function(nextProps) {
        const that = this;
        this.data = nextProps.data?nextProps.data:'';
    },
    getSesstion() {
        const that = this;
        if(that.data != '' && null != that.data){
            let dataPersons = 0;
            let value;
            for ( let i in that.data ) {
                value = that.data[i];
                dataPersons+=value;
            };

            $(".personSum").html(dataPersons);
        }else{
            $(".personSum").html("");
        };
    },
    componentDidUpdate: function() {
        this.getSesstion();
    },
    render: function(){
        return(
            <div id="topTitle" className="topTitle" >
                <div className="table">
                    <div className="title">累计培训人数</div>
                    <div className="personData">
                        <p className="personSum"> 
                        </p>
                    </div>
                </div>
            </div>
        )
    }
});

/**
 * @name ConComponent 折线图数据加载组件
 * @param _getDatas 获取折线图数据
 */
var ConComponent = React.createClass({
    getInitialState: function() {
        return {
            data: []
        };
    },
    componentDidMount: function() {//加载数据。
        this._getDatas();
    },
    _getDatas: function() {
        const that = this;
        let setData = {
            "areaId": areaId ? areaId : '',
            dataType:'json',
            type:'GET'  
        };
        
        $.GetAjax($.getCtx()+'/rest/ectrain/getTBTrainTimeList', setData,'GET', true, function(data,state) {
           if (state && data != " " && null != data) {
                that.setState({
                    data:data
                });
            } else {
                setTimeout(function() {//数据没有请求成功，就一直请求
                    that._getDatas();
                    console.log('链接服务器失败');
                }, 4000);
                that.setState({
                    data:''
                });
            };
        });
    },
    render: function() {
        return (
            <LineComponent data={this.state.data ? this.state.data : []} getDatas={this._getDatas}/>
        )
    }
});

/**
 * @name LineComponent 折现图组件
 * @param _getName 头部信息名称
 */
var LineComponent = React.createClass({
    componentDidMount:function(){
        $("#bgimgqu").attr("class","press");
        $("#bgimgqu2").attr("class","free");
        $("#bgimgqu3").attr("class","press");
        $("#bgimgqu4").attr("class","free");
    },
    componentWillReceiveProps: function(nextProps) {
        const that = this;
        this.data = nextProps.data?nextProps.data:'';
    },
    line:function(){
        toolbarSelf.__onMagicTypeItemName("line");
        $("#bgimgqu").attr("class","press");
        $("#bgimgqu2").attr("class","free");
    },
    bar:function(){
        toolbarSelf.__onMagicTypeItemName("bar");
        $("#bgimgqu").attr("class","free");
        $("#bgimgqu2").attr("class","press");
    },
    stack:function(){
        toolbarSelf.__onMagicTypeItemName("stack");
        $("#bgimgqu3").attr("class","press");
        $("#bgimgqu4").attr("class","free");
    },
    tiled:function(){
        toolbarSelf.__onMagicTypeItemName("tiled");
        $("#bgimgqu3").attr("class","free");
        $("#bgimgqu4").attr("class","press");
    },
    getSesstion() {
        const that = this;
        let itemStyles = [];
        let lineColors = [ '#8DC909', '#F67734', '#EAE63D','#8DC909','#8DC909','#8DC909','#8DC909'];
        let areaColors = [
            [[0, 'rgba(92,119,48,0.9)'],[0.8, 'rgba(96,127,51,0.9)']],//个人
            [[0, 'rgba(139,75,27,0.9)'],[0.8, 'rgba(135,72,31,0.9)']],//政府
            [[0, 'rgba(136,125,63,0.9)'],[0.8, 'rgba(134,125,58,0.9)']],//企业
            [[0, 'rgba(2,163,66,0.9)'],[0.8, 'rgba(2,163,66,0.5)']],//创业者
            [[0, 'rgba(0,204,222,0.9)'],[0.8, 'rgba(0,204,222,0.5)']],//店铺人员
            [[0, 'rgba(0,104,222,0.9)'],[0.8, 'rgba(0,104,222,0.5)']],//京川服务人员
            [[0, 'rgba(125,0,222,0.9)'],[0.8, 'rgba(125,0,222,0.5)']]//社区
        ];
        for ( let i = 0; i < lineColors.length; i++) {
            itemStyles.push({
                normal: {
                     lineStyle: { //上面线条样式
                         color: lineColors[i],
                         width: 4,
                     },
                     color: lineColors[i], //决定了上面远点的样式
                     areaStyle: {
                         type: 'default',
                         color: (function() {
                             var zrColor = zrender.tool.color;
                             return zrColor.getLinearGradient(
                                 0, 0, 0, 100, areaColors[i]
                             )
                         })(),
                     }
                }
            });
        };
        let dom = this.refs['JsLine'];//findDOMNode从组件获取真实 DOM 的节点
        if(that.data !=' '&& null != that.data ){
              let array=[];           
              for(let index in that.data){
                    let key=index; //电商课程分类名字 
                    let value=that.data[index];//电商课程列表
                    let x=[];
                    let y=[];
                    for(let i=0;i<value.length;i++){
                         let dataTime=value[i].dataTime;
                         let persion=value[i].persons;
                         x.push(dataTime);
                         y.push(persion);
                    }
                    let obj=new Object();
                    obj.x=x;//x轴名称
                    obj.y=y;//对应数值
                    obj.name=key;//类型名称
                    array.push(obj);
            };
            this.getCanvas({
                id: dom,
                data:array,
                itemStyles:itemStyles,
                xdata:array[0].x
            });
        }else{
            this.getCanvas({
                data:'',
                id: dom
            });
        };
    },
    getCanvas:function(obj){
        const myChart = echarts.init(obj.id,'macarons').clear();
        let datas=obj.data;
        let itemStyles=obj.itemStyles;
        let series=[];
        for(let i=0;i<datas.length;i++){
            let data=datas[i];
            series.push( {
                 name: 'name',
                 type: 'line',
                 stack: '总量',
                 barWidth: 55,
                 symbol: 'circle',
                 symbolSize: 2,
                 itemStyle: itemStyles[i],
                 data: data.y
             });
        }             
        let option = { 
             grid: {
                 borderWidth: 0,
                 width:'92%',
             },
             tooltip: {
                 show:false,
                 trigger: 'axis',
                 axisPointer: {
                     "type": "line",
                     "lineStyle": {
                         "color": "#fff",
                         "width": 0,
                         "type": "solid"
                     },
                 }
             },
             toolbox: {
                 show: true,
                 orient: 'horizontal', 
                 x:'right', 
                 y: 'top', 
                 color: ['#20B1ED', '#E47337', '#B679DC', '#22bb22'],
                 backgroundColor: '#1F2353', // 工具箱背景颜色
                 borderColor: '#ccc', // 工具箱边框颜色
                 borderWidth: 0, // 工具箱边框线宽，单位px，默认为0（无边框）
                 padding: 10, // 工具箱内边距，单位px，默认各方向内边距为5，
                 showTitle: true,
                 feature: {
                     magicType: {
                         show: true,
                         title: {
                             line: '动态类型切换-折线图',
                             bar: '动态类型切换-柱形图',
                             stack: '动态类型切换-堆积',
                             tiled: '动态类型切换-平铺'
                         },
                         type: ['line', 'bar', 'stack', 'tiled'],
                     }
                 }
             },
             dataZoom: { //滑动块样式
                 show: false,
                 realtime: true,
                 start: 0,
                 end: 100,
                 height: 20,
                 borderWidth: 0,
                 borderColor: '#2a2f42',
                 backgroundColor: '#2a2f42',
                 dataBackgroundColor: '#2a2f42',
                 fillerColor: '#1C2134',
                 handleColor: '#3e5d75',
             },
             grid: {
               height:'85%',
               width:'90%',
               x:'5%',
               y:'3%',
               x2:'95%',
               y2:'88%',
               borderColor:'rgba(125,0,222,0.0)'
             },
             calculable: false,
             xAxis: [{
                 type: 'category',
                 boundaryGap : false,
                 //boundaryGap:  false,[0,0],
                 axisLine: { //坐标轴线，默认显示
                     show: true,
                     lineStyle: {
                         color: '#6C7A8F',
                         width: 2,
                         type: 'solid',
                     },
                 },
                 splitLine: {
                     show: false,
                     lineStyle: {
                         color: '#fff',
                         width: 1,
                     },
                 },
                 axisLabel: {
                     textStyle: {
                         color: '#adb3c0',
                     },
                 },
                 data: obj.xdata
             }],
             yAxis: [{
                 type: 'value',
                 axisLine: { 
                     lineStyle: {
                         color: '#6C7A8F',
                         width: 2,
                         type: 'solid',
                     },
                 },
                 axisLabel: {
                     interval: 100,
                     textStyle: {
                         color: '#adb3c0',
                     },
                 },
                 splitLine: {
                     show: false,
                 },
                 splitArea: {
                     show: true,
                     areaStyle: {
                         color: ['#14192c', '#161B2E'],
                     },
                 },
             }],
             series: series
        };
        myChart.setOption(option);
    },
    componentDidUpdate: function() {
        this.getSesstion();
    },
    render: function(){
        return(
            <div className="content">
                <div className="conbg">
                    <ul className="button">
                        <li id="bgimgqu" onClick ={this.line}>
                           <img alt="" src="./img/button-1.png" />
                        </li>
                        <li id="bgimgqu2" onClick ={this.bar}>
                           <img alt="" src="./img/button-2.png" />
                        </li>
                        <li id="bgimgqu3" onClick ={this.stack}>
                           <img alt="" src="./img/button-3.png" />
                        </li>
                        <li id="bgimgqu4" onClick ={this.tiled}>
                            <img alt="" src="./img/button-4.png" /> 
                        </li>
                    </ul>
                </div>
                <div className="contop"></div>
                <div id="conLine" className="conLine"  ref="JsLine"  ></div>
            </div>
        )
    }
});

/**
 * @param Container   总组件
 */
var Container = React.createClass({
    render: function() {
        return (
            <div className="con" id="con">
                <TopComponent />
                <ConComponent />
            </div>
        )
    }
});

/**
 * @param 添加整个Container组件到页面
 */
ReactDOM.render(
    <Container />,
    document.body
);