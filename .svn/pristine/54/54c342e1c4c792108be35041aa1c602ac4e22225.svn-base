import {
	getJson,
	getAreaCp,
	pushScrollNum,
	formatPrice,
	toThousands,
	addZero
} from "common";
import "echarts-line";
import "echarts-map";
import "ajax-plus";
import "./common/screenPropor.js";
import "../../less/ProvinSingleTimeLine.less";
import React from 'react';
import ReactDOM from 'react-dom';
import PubSub from 'pubsub-js';

// 获取区域id
let areaId = $.getUrlParam('areaId');

class SmallComponent extends React.Component {
	state = {
		status: false
	}
	constructor(props) {
		super(props);
	}
	componentDidMount() {
		const obj = {
			id: 'JS_smallMap'
		};
		let setting = {
			series: [{
				name: '地图',
				type: 'map',
				data: [],
				hoverable: false,
				roam: false,
				itemStyle: {
					normal: {
						label: {
							show: false
						},
						borderWidth: 0.1,
						areaStyle: {
							type: 'default',
							color: function() {
								var zrColor = zrender.tool.color;
								return zrColor.getLinearGradient(0, 0, 0, $(window).height() / 3 * 2, [
									[0, 'rgba(255,251,0,.8)'],
									[.8, 'rgba(255,251,0,.1)']
								]);
							}()
						}
					},
					emphasis: {
						label: {
							show: true
						}
					}
				},
				data: []
			}]
		};
		setTimeout(function() {
			$.getSmallMap(obj, setting);
		}, 500)

	}
	render() {
		return (
			<div className="mapShowBox">
				<img src="img/timeline/smallMapBg.png" alt="背景图"/>
				<div id="JS_smallMap" className="smallMapDv"></div>
			</div>
		)
	}
}

class SectionComponent extends React.Component {
	constructor(props) {
		super(props);
		this.ECs = void 0;
		this.pushDataSet = void 0;
	}
	componentDidMount() {
		this.getJsonData();
	}
	getJsonData() {
		const config = {
			areaId: areaId,
			time: new Date().getTime()
		}
		$.GetAjax($.getCtx() + '/rest/data/timeList', config, 'GET', true, (data, state) => {
			if (state && data.code == 0) {
				this.callpack(data.datas);
			} else if (!state) {
				setTimeout(() =>{
					this.getJsonData();
					console.log('主人，刚才服务器出了一下小差');
				}, 2000);
			} else {
				$.noDataFunc();
			}
		});
	}
	callpack(data) {
		let config = [];
		if (data && data[0]) {
			let data_x = data[0].x;
			let data_y = data[0].y;
			let onetodayNum = data[0].todayNum;
			$("#JS_get_areaName").html(data[0].area.shortName+"&nbsp;&nbsp;");

			pushScrollNum(onetodayNum, "#JS_get_aniNum");

			let setting = {
				grid: {
					x: 0,
					y: 50,
					x2: 0,
					y2: 30
				},
				tooltip: {
					trigger: 'axis',
					formatter: '{b}</br>{a}:{c}'
				},
				animationDuration: 2000,
				animationDurationUpdate: 250,
				xAxis: [{
					show: true,
					type: 'category',
					boundaryGap: false,
					data: data_x,
					splitLine: {
						show: false,
						lineStyle: {
							color: ['rgba(255,255,255,.6)']
						}
					},
					axisLine: {
						show: false,
						lineStyle: {
							color: 'rgba(108,123,144,0.8)'
						}
					},
					axisLabel: {
						textStyle: {
							color: '#fff',
							fontFamily: 'arial',
							fontSize: $(window).height() * 0.04,
							align: 'left'
						},
						interval: 0
					}
				}],
				yAxis: [{
					show: false,
					name: '/元',
					nameLocation: 'end',
					type: 'value',
					splitLine: {
						show: false
					},
					nameTextStyle: {
						color: '#6c7b90',
						fontFamily: '微软雅黑',
						fontSize: $(window).height() * 0.05
					},
					axisLine: {
						show: true,
						lineStyle: {
							color: 'rgba(108,123,144,0.8)'
						}
					},
					axisLabel: {
						formatter: function formatter(value) {
							return value;
						},
						textStyle: {
							color: '#6c7b90',
							fontFamily: '微软雅黑',
							fontSize: $(window).height() * 0.05,
							align: 'left'
						}
					},
					splitArea: {
						show: false,
						areaStyle: {
							color: ['rgba(255,255,255,0.02)', 'rgba(255,255,255,0)']
						}
					}
				}]
			};

			let seriesData = data_y;
			let seriesLength = seriesData[seriesData.length - 1];
			seriesData.pop();
			seriesData.push({
				value: seriesLength,
				symbol: '',
				symbolSize: 0,
				symbolRotate: ''
			});

			let series = [{
				symbolSize: 0,
				smooth: true,
				name: '交易额',
				type: 'line',
				stack: 'group',
				data: seriesData,
				itemStyle: {
					normal: {
						label: {
							show: true,
							textStyle: {
								color: '#fff'
							}
						},
						color: "#ffdd00",
						lineStyle: { // 系列级个性化折线样式
							type: 'solid',
							width: 2,
							shadowBlur: 2
						},
						label: {
							show: true,
							formatter:value =>{
								return value.value == 0 ? '' : value.value;
							},
							textStyle: {
								fontSize: $(window).height() * 0.056,
								color: '#fff',
								fontFamily: '微软雅黑'
							}
						},
						areaStyle: {
							// 区域图，纵向渐变填充
							type: 'default',
							color: function() {
								var zrColor = zrender.tool.color;
								return zrColor.getLinearGradient(0, 0, 0, $(window).height(), [
									[0, 'rgba(255,221,0,.8)'],
									[0.8, 'rgba(255,221,0,.2)']
								]);
							}()
						}
					}
				}
			}];

			$('#Js_canvas_cont').pushEcharts($.module('line', setting, series, config), ec => {
				setTimeout(() => {
					$('.onLoading').remove();
					$('#container').css("opacity",1);
				}, 1000);
				this.pushDataSet = setTimeout(()=>{
					this.ECs = ec;
					this.addDatas(this.ECs);
				},5000);
			});
		}
	}
	addDatas(ecs) {
		const that = this;
		//获取毫秒数
		let d = new Date();
		let h = d.getHours(); //获取当前小时数(0-23)
		let m = d.getMinutes(); //获取当前分钟数(0-59)
		let s = d.getSeconds(); //获取当前秒数(0-59)
		if ((m + "").length == 1) {
			m = 0 + "" + m;
		}
		if ((s + "").length == 1) {
			s = 0 + "" + s;
		}

		function callpack(data) {
			const one = data[0].datas[0];
			const oneAmount = one.totals ? one.totals : 0;
			const oneTodayNum = data[0].todayNum;

			pushScrollNum(oneTodayNum, "#JS_get_aniNum");

			that.pushDataSet = setTimeout(() =>{
				that.addDatas(ecs);
			}, 5000);

			ecs.addData([
				[0, // 系列索引
					{
						value: oneAmount,
						symbol: '',
						symbolSize: 0
					}, // 新增数据
					false, // 新增数据是否从队列头部插入
					false, // 是否增加队列长度，false则自定删除原有数据，队头插入删队尾，队尾插入删队头
					h + ":" + m + ":" + s // 坐标轴标签
				]
			]);

		}
		const config = {
			areaId: areaId,
			time: new Date().getTime()
		}
		$.GetAjax($.getCtx() + '/rest/data/time', config, 'GET', true, (data, state) => {
			if (state && data.code == 0) {
				callpack(data.datas);
			} else if (!state) {
				setTimeout(() => {
					that.addDatas(ecs);
					console.log('主人，刚才服务器出了一下小差');
				}, 2000);
			}
		});
	}
	render() {
		return (
			<div className="timeLineBox">
				<div className="navNameShow">
					<div className="navHeadBox">
						<span id="JS_get_areaName"></span>
						<span>今日累计网络零售额&nbsp;&nbsp;</span>
						<span id="JS_get_aniNum" className="get-ani-num">0</span>元
					</div>
				</div>
				<div className="sectionBox" id="Js_canvas_cont"></div>
				<div className="xuniBg"></div>
			</div>
		)
	}
}

class Container extends React.Component {
	constructor(props) {
		super(props);
	}
	render() {
		return (
			<div className="container">
	    		<SmallComponent />
	    		<SectionComponent/>
	    	</div>
		)
	}
}

ReactDOM.render(
	<Container />,
	document.getElementById('container')
);