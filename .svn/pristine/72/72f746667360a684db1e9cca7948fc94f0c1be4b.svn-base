"use strict";
import "SaleDistribution";
import {getAreaName,getMapPosition,splitString,getQuarter,addPlaceHolder} from "common";
import "./common/screenPropor.js";
import "jquery";
import "ajax-plus";
import React from 'react';
import ReactDOM from 'react-dom';

// 获取区域id
let areaId = $.getUrlParam('areaId');

// 获取区域name
let name = $.getUrlParam('name');
/**
 * @name HeaderComponent 头部组件
 * @param _getName 头部信息名称
 */
var HeaderComponent = React.createClass({
    componentWillMount:function(){
         this.setState({
            data:""
        });
    },
    componentDidMount: function () {
        var windowWidth = $(window).height()*0.003;
        $('.headerLine').css({
            borderTop:''+windowWidth+ 'px solid rgba(0, 153, 255, 0.5)'
        });
    },
    componentWillUpdate:function(props,state){//在接收到新的 props 或者 state 之前立刻调用。
        var data=props.data.datas ? props.data.datas : [] ;
        if(!data.length>0||state.ready){
            return false;
        }
        let datatime = props.data.datatime;
        $("#datatime").html(datatime);
    },
    componentDidUpdate:function(){
        $("#areaName").html(name);
    },
    render: function() {
        return (
            <div className="header">
                <div className="head-left"></div>
                <div className="head-con">
                    <img alt="header" src="./img/head-bg.png"/>
                    <p><label id="areaName"></label>&nbsp;&nbsp;<span id="datatime"></span>&nbsp;&nbsp;农特产品全国经销商经销热力图</p>
                </div>
                <div className="head-right"></div>
            </div>
        )
    }
});

/**
 * @name ConComponent 主要内容组件
 * @param _getName 头部信息名称
 */
var ConComponent = React.createClass({
    render: function() {
        return (
            <div className="con">
                <ConListComponent data={this.props.data}/>
                <RightComponent/>
                <GetMapComponent data={this.props.data}  ref='JsMap' />
            </div>
        )
    }
});

/**
 * @name ConComponent 主要内容里列表组件
 * @param _getName 列表表头信息
 * @param componentWillMount 初始化渲染前调用
 * @param componentWillUpdate 在接收到新的 props 或者 state 之前立刻调用。
 */
var ConListComponent =React.createClass({
    componentWillMount:function(){
         this.setState({
            dom:""
        });
    },
    componentWillUpdate:function(props,state){//在接收到新的 props 或者 state 之前立刻调用。
        var data=props.data;
        let arr = data.datas ? data.datas : []; //获取数据进行遍历赋值
        if(!arr.length>0||state.ready){
            return false;
        }
        let size=10;//每页行数
        let page=1;
        let pageTotal;//总页数
        let rest =arr.length%size;//总数据除以每页个数后余下行数
        if(rest=0 ){
            pageTotal=arr.length/size;
        }else{
            pageTotal=Math.ceil(arr.length/size);
        };
        let listArray=[];
        let index = 0;//第一页
        let newIndex=0;
        for(let i=0;i<10;i++){
            listArray.push(arr[i]);

        };
        var that=this;
        var dom = listArray.map(function(item,list){
            index = Number(index+1);
            newIndex = addPlaceHolder(index);
            return <SectionListComponent item={item} list={list} newIndex={newIndex}/>
        });
        
        this.setState({
            dom:dom,
            ready:true
        });
        setInterval(function(){
            page+=1;
            if(page>pageTotal){
                page=1;
            }
            listArray=[];
            let startPoint=(page-1)*size;
            let endPoint=page*size;
            for(let i=startPoint;i<endPoint;i++){
                    listArray.push(arr[i]);
            }
            var dom = listArray.map(function(item,list){
                index = index >= pageTotal*10 ? 1 : index+1;
                newIndex = addPlaceHolder(index);
                return <SectionListComponent item={item} list={list} newIndex={newIndex}/>
            });
            that.setState({
                dom:dom,
                ready:true
            });
        },5000)
    },
    render: function() {
        return (
            <div className="list">
                 <div className="table" >
                    <div className="thead">
                        <ul>
                            <li >排名</li>
                            <li >地域</li>
                            <li >销售指数</li>
                        </ul>
                    </div>
                    <div className="tbody">
                        {this.state.dom}
                    </div>
                </div>
            </div>
        )
    }
});

/**
 * @name SectionListComponent 内容中列表行组件
 * @param componentWillMount 渲染前赋值
 * @param componentWillReceiveProps 当该组件接收到新的props时更新组件
 */
var SectionListComponent = React.createClass({
    componentWillReceiveProps: function(nextProps) {
        this.item=nextProps.item;
        this.setState({
            updata:true
        });
    },
    render: function() {
        this.item=this.props.item;
        return (
            <ul>
                <li  className={this.item ? "data"+this.props.newIndex:''}>{this.item? this.props.newIndex: ''}</li>
                <li >{this.item ? this.item.toAreaName  : ''}</li>
                <li >{this.item ? this.item.value.toFixed(2) : ''}</li>
            </ul>
        )
    }
});


/**
 * @name GetMapComponent 地图部分组件
 * @param getInitialState 初始化执行一次添加当前组件状态的state
 * @param componentDidMount在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。
 * @param componentDidUpdate 初始化渲染不会调用，更新后调用。
 * @param componentWillReceiveProps 初始化渲染不会调用，在接收到新的props时，会调用这个方法。
 * @param getCanvas 计算生成echarts的option属性
 */
var GetMapComponent = React.createClass({
    componentWillReceiveProps: function(nextProps) {
        const that = this;
        this.data = nextProps.data;
    },
    getSesstion() {
        const that = this;
        let rowDatas = that.data.datas?that.data.datas:'';
        let dom = that.refs['JsMap '];//findDOMNode从组件获取真实 DOM 的节点
        if(rowDatas && rowDatas.length){
            let dataMax=rowDatas[0].value;
            let dataMin=rowDatas[rowDatas.length-1].value;
            this.getCanvas({
                data: that.data.datas,
                id: dom,
                dataMax:dataMax,
                dataMin:dataMin
            });
        }else{
            this.getCanvas({
                data:'',
                id: dom,
                dataMax:'',
                dataMin:''
            });
        };

    },
    componentDidUpdate: function() {
        this.getSesstion();
    },
    getCanvas: function(obj) {
        const myChart = echarts.init(obj.id).clear();
        //初始地域样式设置
        let series = [{
            name : '销售指数分布',
            type : 'map',
            mapType : 'china',
            selectedMode : 'single',
            hoverable : false,
            roam : false,
            itemStyle : {
                normal : {
                    label : {
                        show : false,
                        textStyle : {
                            color : '#fff'
                        }
                    },
                    borderWidth : 1,
                    borderColor : 'rgba(0,153,255,1)',
                    areaStyle : {
                        type : 'default',
                        color: 'rgba(0,153,255,0.1)'
                    }
                },
                emphasis : {
                    label : {
                        show : false,
                        textStyle : {
                            color : '#0066ff',
                            fontSize : 1
                        }
                    },
                    color : '#0066ff',
                    opacity : 0.2
                }
            },
            data : [
                {
                     name: '南海诸岛',
                     itemStyle: {
                        normal: {
                            borderWidth : 1,
                            borderColor : 'rgba(0,153,255,1)',
                            areaStyle : {
                                type : 'default',
                                color: 'rgba(0,153,255,0.1)'
                            },
                            label: {
                                show: true,
                                textStyle: {
                                    color: 'rgba(0,153,255,1)',
                                    fontSize: $(window).height()*0.018
                                }
                            }
                        }
                    }
                }
            ]
        }];
        let He = $(window).height()*0.009;//数据最大对应最大点
        let HeMin = He*0.002;//数据最小时最小点
        let data = obj.data;
        for(let n =0; n<data.length; n++){
            //每一个点大小由数据大小决定
            let HeImg = data[n].value/obj.dataMax*He > HeMin ? data[n].value/obj.dataMax*He : HeMin;
            if(data[n]){
                series.push(
                    {
                        name : 'name',
                        type : 'map',
                        mapType : 'china',
                        roam : false,
                        data : [],
                        markPoint : {
                            symbolSize : HeImg.toFixed(2),
                            large : true,
                            effect : {
                                show : true
                            },
                            data : (function() {
                                var passData = [];
                                var len = data.length ;
                                var lenw = 10 ;//每一个省显示点数量
                                var geoCoord;
                                var areaName;
                                var value;
                                while (lenw--) {
                                    areaName = data[n]["toAreaName"];
                                    value = data[n]["value"];
                                    value = Number(value);
                                    geoCoord =getMapPosition().get(areaName);
                                    if(geoCoord==null||"null"==geoCoord){
                                        return false;
                                    }else{
                                        passData.push({
                                            name :areaName + len,
                                            value : value,
                                            geoCoord : [geoCoord[0] + Math.random() * 3 - 2.5,
                                                        geoCoord[1] + Math.random() * 1 - 1.5 ]
                                        });
                                    };
                                }
                                return passData;
                            })()
                        }
                    }
                );
            }
        };

        let option = {
            color : [ 'rgba(255, 221, 0, 1)',
                      'rgba(255, 221, 0, 1)' ],
            legend : {
                orient : 'vertical',
                x : 'left',
                data : [ '', '', '' ],
                textStyle : {
                    color : '#0099ff'
                }
            },
            series: series
        };
        myChart.setOption(option);
    },
    
    render: function() {
        return (
            <div className="jsmap" ref="JsMap "></div>
        )
    }
});


/**
 * @name RightComponent 左部组件
 * @param _getText 右部文字信息
 */
var RightComponent = React.createClass({
    render: function(){
        return (
            <div className="saleDis">
                <img src="./img/saleDistribution.png"/>
                <p>销售指数</p>
            </div>
        )
    }
});

var Container = React.createClass({
    getInitialState: function() {
        return {
            data: []
        };
    },
    componentDidMount: function() {//加载数据。当加载成功，将数据存储在 state 中，触发 render 来更新你的 UI。
        this._getDatas();
    },
    _getDatas: function() {//加载数据方法
        const that = this;
        let setData = {
            "areaId": areaId ? areaId : '',
            // dataType:'json',
            type:1,
            needAll:true
        };
        $.GetAjax($.getCtx()+'/rest/distribute/area', setData, 'GET', true, function(data , state) {
        // $.GetAjax('/TJ-province/public/data/getAreaScale.json', setData, 'GET', true, function(data) {
           if (state && data.datas.length>0) {
                setTimeout(function(){
                    $('.onLoading').remove();
                    $("#con").css("opacity",1);
                },1000);
                that.setState({
                    data:data
                });
            } else {
                setTimeout(function() {//数据没有请求成功，就一直请求
                    that._getDatas();
                    console.log('主人，刚才服务器出了一下小差');
                }, 2000);
                that.setState({
                    data:''
                });
            };
        });
    },
    render: function() {
        return (
            <div  id="content">
                 <HeaderComponent data={this.state.data ? this.state.data : []} getDatas={this._getDatas}/>
                 <ConComponent data={this.state.data ? this.state.data : []} />
            </div>
        )
    }
});

/**
 * @param 添加整个Container组件到页面
 */
ReactDOM.render(
    <Container />,
    document.getElementById('con')
);